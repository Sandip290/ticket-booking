/*
 * This source file was generated by the Gradle 'init' task
 */
//package com.ticketbooking;
package com.ticketbooking;

import com.ticketbooking.entities.Train;
import com.ticketbooking.entities.User;
import com.ticketbooking.services.UserBookingService;
import com.ticketbooking.utils.UserServiceUtil;

import java.io.IOException;
import java.util.*;

public class App {

    public static void main(String[] args) {

        System.out.println("Running IRCTC Ticket Booking System");
        Scanner sc = new Scanner(System.in);

        int option = 0;
        User user = null;
        Train trainSelectedForBooking = null;
        String source = null;
        String destination = null;

        UserBookingService userBookingService;
        try{
            userBookingService = new UserBookingService();
        } catch (IOException ex) {
            System.out.println("Error: Could not initialize booking system (File I/O issue).");
            ex.printStackTrace();
            return;
        }
        while(option!=7){
            System.out.println("\n--- MAIN MENU ---");
            System.out.println("1: sign up");
            System.out.println("2: login");
            System.out.println("3: Fetch Booking");
            System.out.println("4: Search Trains");
            System.out.println("5: Book a seat");
            System.out.println("6: Cancel Booking");
            System.out.println("7: Exit");

            if(sc.hasNextInt()){
                option = sc.nextInt();
            }else{
                System.out.println("Invalid input. Please enter a number from 1 to 7");
                sc.next();
                continue;
            }

            switch(option){
                case 1:
                    System.out.println("Enter user name to sign up");
                    String nameToSignUp = sc.next();
                    System.out.println("Enter user password to sign up");
                    String passwordToSignUp = sc.next();
                    User userToSignUp = new User(nameToSignUp,passwordToSignUp, UserServiceUtil.hashPassword(passwordToSignUp),
                            new ArrayList<>(), UUID.randomUUID().toString());
                    if(userBookingService.signUp(userToSignUp)){
                        System.out.println("Sign up successful");
                    }else{
                        System.out.println("Sign up failed");
                    }
                    break;

                case 2:
                    System.out.println("Enter user name to login");
                    String nameToLogin = sc.next();
                    System.out.println("Enter user password to login");
                    String passwordToLogin = sc.next();
                    User userToLogin = new User(nameToLogin, passwordToLogin, UserServiceUtil.hashPassword(passwordToLogin),
                            new ArrayList<>(), UUID.randomUUID().toString());
                    try{
                        userBookingService = new UserBookingService(userToLogin);
                    }catch (IOException ex){
                        System.out.println("Error reading user database on login attempt.");
                        return;
                    }
                    if (userBookingService.loginUser()) {
                        user = userBookingService.getUser(); // Retrieves the authenticated user object (from the database)
                        System.out.println("Login successful! Welcome, " + user.getName());
                    } else {
                        System.out.println("Login failed. Check username and password.");
                        user = null; // Ensure no user is logged in on failure
                    }
                    break;

                case 3:
//                    System.out.println("Fetching your booking");
//                    UserBookingService.fetchBookings();
//                    break;
                    if (user != null) {
                        System.out.println("Fetching your bookings for " + user.getName() + ":");
                        userBookingService.fetchBookings(); // FIX: Called on the instance!
                    } else {
                        System.out.println("Please log in first (Option 2).");
                    }
                    break;

                case 4:
                    System.out.println("Type your source station");
                    source = sc.next();
                    System.out.println("Type your destination station");
                    destination = sc.next();
                    List<Train> trains = userBookingService.getTrains(source, destination);

                    if (trains.isEmpty()) {
                        System.out.println("No trains found for this route.");
                        trainSelectedForBooking = null;
                        break;
                    }

                    System.out.println("\n--- Available Trains (" + trains.size() + ") ---");
                    int index = 1;

                    for(Train t : trains) {
                        System.out.println(index + ") Train ID: " + t.getTrainId() + " | No: " + t.getTrainNo());

                        for(Map.Entry<String, String> entry : t.getStationTimes().entrySet()) {
                            System.out.println("station " + (String)entry.getKey() + " time: " + (String)entry.getValue());
                        }
                        index++;
                    }


                    System.out.println("Select a train by typing its number (" + 1 + " to " + (index - 1) + "):");
                    int trainChoice = sc.nextInt();

                    if (trainChoice > 0 && trainChoice <= trains.size()) {
                        trainSelectedForBooking = trains.get(trainChoice - 1); // Save to persistent variable
                        System.out.println("Train selected: " + trainSelectedForBooking.getTrainNo());
                    } else {
                        System.out.println("Invalid selection. Train reset.");
                        trainSelectedForBooking = null;
                    }
                    break;

//                    System.out.println("Select a train by typing 1,2,3...");
//                    trainSelectedForBooking = (Train)trains.get(sc.nextInt());
//                    break;
                case 5: // Book a seat
                    if (user == null) {
                        System.out.println("Please log in first (Option 2).");
                        break;
                    }

                    if (trainSelectedForBooking == null) {
                        System.out.println("Please search for and select a train first (Option 4).");
                        break;
                    }

                    System.out.println("Selected train: " + trainSelectedForBooking.getTrainNo());
                    System.out.println("Seats Key: 0 = Available, 1 = Booked");

                    // FIX: Calls fetchSeats on the instance
                    List<List<Integer>> seatMap = userBookingService.fetchSeats(trainSelectedForBooking);

                    System.out.println("\n--- SEAT MAP (Row(Col)) ---");
                    int rowNum = 0;
                    for(List<Integer> rowList : seatMap) {
                        System.out.print("Row " + rowNum + ": ");
                        int colNum = 0;
                        for(Integer val : rowList) {
                            System.out.print(val + "(" + colNum + ") ");
                            colNum++;
                        }
                        System.out.println();
                        rowNum++;
                    }
                    System.out.println("----------------");

                    System.out.println("Select the seat by typing the row and column (e.g., 0 1)");
                    System.out.println("Enter the row (0 to " + (seatMap.size() - 1) + "):");
                    int row = sc.nextInt();
                    System.out.println("Enter the column (0 to " + (seatMap.get(0).size() - 1) + "):");
                    int col = sc.nextInt();

                    if (row < 0 || row >= seatMap.size() || col < 0 || col >= seatMap.get(0).size()) {
                        System.out.println("Invalid row or column selected.");
                        break;
                    }

                    System.out.println("Booking your seat (" + row + ", " + col + ")...");

                    // FIX: Calls bookTrainSeat on the instance, passing persistent source/dest
                    Boolean booked = userBookingService.bookTrainSeat(
                            trainSelectedForBooking,
                            row,
                            col,
                            source,
                            destination
                    );

                    if (booked.equals(Boolean.TRUE)) {
                        System.out.println("Booked! Enjoy your journey.");
                    } else {
                        System.out.println("Can't book this seat. Either it's taken or an error occurred.");
                    }
                    break;

                case 6: // Cancel Booking
                    if (user == null) {
                        System.out.println("Please log in first (Option 2).");
                        break;
                    }
                    System.out.println("Enter the Ticket ID you wish to cancel:");
                    String ticketIdToCancel = sc.next();

                    if (userBookingService.cancelBooking(ticketIdToCancel)) {
                        System.out.println("Ticket ID " + ticketIdToCancel + " successfully canceled.");
                    } else {
                        System.out.println("Cancellation failed. Ticket not found or an error occurred.");
                    }
                    break;

                case 7:
                    System.out.println("Thank you for using the IRCTC Ticket Booking System. Goodbye!");
                    break;

                default:
                    System.out.println("Invalid option. Please choose a number between 1 and 7.");

            }
        }

    }
}
